name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [master]

jobs:
  build_and_test_linux:
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: Linux, os: ubuntu-latest, triple: x86_64-unknown-linux-gnu }
        version:
          - 1.59 # MSRV
          - stable

    name: ${{ matrix.target.name }} / ${{ matrix.version }}
    runs-on: ${{ matrix.target.os }}

    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --entrypoint redis-server

    steps:
      - uses: actions/checkout@v3

      - name: Install ${{ matrix.version }}
        run: |
          rustup install ${{ matrix.version }}-${{ matrix.target.triple }}
          rustup override set ${{ matrix.version }}-${{ matrix.target.triple }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: Generate Cargo.lock
        run: cargo generate-lockfile
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2.1.0

      - name: check minimal
        run: cargo ci-min

      - name: check minimal + examples
        run: cargo ci-check-min-examples

      - name: check default
        run: cargo ci-check

      - name: tests
        timeout-minutes: 40
        run: cargo ci-test

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --version 0.6.2 --no-default-features --features ci-autoclean
          cargo-cache

  build_and_test_other:
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: macOS, os: macos-latest, triple: x86_64-apple-darwin }
          - {
              name: Windows,
              os: windows-latest,
              triple: x86_64-pc-windows-msvc,
            }
        version:
          - 1.59 # MSRV
          - stable

    name: ${{ matrix.target.name }} / ${{ matrix.version }}
    runs-on: ${{ matrix.target.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install ${{ matrix.version }}
        run: |
          rustup install ${{ matrix.version }}-${{ matrix.target.triple }}
          rustup override set ${{ matrix.version }}-${{ matrix.target.triple }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: workaround MSRV issues
        if: matrix.version != 'stable'
        run: |
          cargo install cargo-edit --version=0.8.0
          cargo add env_logger@0.9 --dev -p=actix-cors
          cargo add env_logger@0.9 --dev -p=actix-identity
          cargo add env_logger@0.9 --dev -p=actix-redis
          cargo add env_logger@0.9 --dev -p=actix-session
          cargo add env_logger@0.9 --dev -p=actix-settings

      - name: Generate Cargo.lock
        run: cargo generate-lockfile
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2.1.0

      - name: check minimal
        run: cargo ci-min

      - name: check minimal + examples
        run: cargo ci-check-min-examples

      - name: check default
        run: cargo ci-check

      - name: tests
        timeout-minutes: 40
        run: cargo ci-test --exclude=actix-redis --exclude=actix-session --exclude=actix-limitation

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --version 0.6.2 --no-default-features --features ci-autoclean
          cargo-cache

  doc_tests:
    name: doc tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust (nightly)
        run: |
          rustup install nightly
          rustup override set nightly

      - name: Generate Cargo.lock
        run: cargo generate-lockfile
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2.1.0

      - name: doc tests
        timeout-minutes: 40
        run: cargo ci-doctest -- --nocapture
